import uuid
import sys
import types
import weakref
import gc
import time


class Node:
    def __init__(self, max_fields=10, memory_limit=None, warn_threshold=0.8):
        """
        Node: —É–∑–µ–ª –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏.
        max_fields ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ —É–∑–ª–µ.
        memory_limit ‚Äî –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—Å–µ–≥–æ –¥–µ—Ä–µ–≤–∞, –±–∞–π—Ç.
        warn_threshold ‚Äî –¥–æ–ª—è –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏ (0..1), –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
        """
        self.max_fields = max_fields
        self.memory_limit = memory_limit
        self.warn_threshold = warn_threshold
        self.data = {}
        self.field_memory = {}  # —É—á—ë—Ç –ø–∞–º—è—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—é
        self.fields_count = 0
        self.children = {}
        self.id = uuid.uuid4()
        self.memory_usage = 0
        self.total_memory_usage = 0
        self.last_gc_check = 0
        self.update_memory_usage()

    # --- –ú–µ—Ö–∞–Ω–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º ---
    def __getattr__(self, name):
        if name not in self.data:
            self.add_field(name, None)
        return self.data[name]

    def __setattr__(self, name, value):
        if name in {'max_fields', 'memory_limit', 'warn_threshold', 'data',
                    'field_memory', 'fields_count', 'children', 'id',
                    'memory_usage', 'total_memory_usage', 'last_gc_check'}:
            super().__setattr__(name, value)
        else:
            self.add_field(name, value)

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é ---
    def _get_object_size(self, obj):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã."""
        size = sys.getsizeof(obj)
        if isinstance(obj, (list, dict, set, tuple)):
            size += sum(self._get_object_size(item) for item in obj)
        elif isinstance(obj, str):
            size += len(obj.encode('utf-8'))
        elif isinstance(obj, types.FunctionType):
            size += sys.getsizeof(obj.__code__) + sys.getsizeof(obj.__defaults__) + sys.getsizeof(obj.__closure__)
        elif isinstance(obj, Node):
            size += obj.get_total_memory_usage()
        return size

    def update_memory_usage(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ä–æ–≥–æ–≤."""
        self.memory_usage = sum(self.field_memory.values())
        self.total_memory_usage = self.memory_usage + sum(child.get_total_memory_usage() for child in self.children.values())

        if self.memory_limit:
            if self.total_memory_usage > self.memory_limit:
                self._raise_memory_limit_warning()
            elif self.total_memory_usage > self.memory_limit * self.warn_threshold:
                print(f"[‚ö†Ô∏è WARNING] Memory usage at {self.total_memory_usage} / {self.memory_limit} bytes "
                      f"({(self.total_memory_usage / self.memory_limit) * 100:.1f}%)")

    def _raise_memory_limit_warning(self):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏."""
        diff = self.total_memory_usage - self.memory_limit
        print(f"[üö® CRITICAL] Memory limit exceeded! "
              f"Limit={self.memory_limit}, Used={self.total_memory_usage}. Increasing by {diff} bytes.")
        self.memory_limit += diff

    def add_field(self, field_name, data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞–º—è—Ç—å."""
        if self.fields_count >= self.max_fields:
            self.max_fields += 1
            print(f"[INFO] Field limit increased to {self.max_fields}")

        self.data[field_name] = data
        field_size = self._get_object_size(data)
        self.field_memory[field_name] = field_size
        self.fields_count = len(self.data)
        self.update_memory_usage()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏/—Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        now = time.time()
        if now - self.last_gc_check > 10:
            gc.collect()
            self.last_gc_check = now
            self.update_memory_usage()

    def remove_field(self, field_name):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —É—á—ë—Ç –ø–∞–º—è—Ç–∏."""
        if field_name in self.data:
            del self.data[field_name]
            self.field_memory.pop(field_name, None)
            self.fields_count -= 1
            self.update_memory_usage()

    def add_child(self, name, node):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª."""
        self.children[name] = node
        self.update_memory_usage()

    def get_total_memory_usage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –≤–∫–ª—é—á–∞—è –ø–æ—Ç–æ–º–∫–æ–≤."""
        self.update_memory_usage()
        return self.total_memory_usage

    # --- –û—Ç—á—ë—Ç—ã –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    def get_memory_report(self, deep=False):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏."""
        report = {
            'node_id': str(self.id),
            'fields': {k: f"{v} bytes" for k, v in self.field_memory.items()},
            'total': f"{self.total_memory_usage} bytes"
        }
        if deep and self.children:
            report['children'] = {k: v.get_memory_report(deep=True) for k, v in self.children.items()}
        return report

    def __repr__(self):
        return f"<Node id={self.id} fields={self.fields_count} mem={self.total_memory_usage}B>"

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

# –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ 5 –ø–æ–ª–µ–π –∏ –ª–∏–º–∏—Ç–æ–º –ø–∞–º—è—Ç–∏ –≤ 10000 –±–∞–π—Ç
root = Node(max_fields=5, memory_limit=1000)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
def greet():
    return "Hello!"

def add(a, b):
    return a + b

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤, –≤–∫–ª—é—á–∞—è —Ñ—É–Ω–∫—Ü–∏–∏
root.field_int = 42  # –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
root.field_str = "Hello, world!"  # –°—Ç—Ä–æ–∫–∞
root.field_list = [1, 2, 3, 4, 5]  # –°–ø–∏—Å–æ–∫
root.field_dict = {'a': 1, 'b': 2}  # –°–ª–æ–≤–∞—Ä—å
root.field_set = {10, 20, 30}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ
root.field_tuple = (1, 2, 3)  # –ö–æ—Ä—Ç–µ–∂
root.field_greet = greet  # –§—É–Ω–∫
root.field_greet()

# –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –ø–∞–º—è—Ç–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
print(f"Total memory usage for root: {root.get_total_memory_usage()} bytes")

# –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
print(root)
print()
print(root.get_memory_report())
